import { useState, useEffect } from "react";
import Filter from "./components/Filter";
import PersonForm from "./components/PersonForm";
import Persons from "./components/Persons";
import Notification from "./components/Notification";
import personsService from "./services/personsService";

const App = () => {
  const [persons, setPersons] = useState([]);
  const [newName, setNewName] = useState("");
  const [newNumber, setNewNumber] = useState("");
  const [filter, setFilter] = useState("");
  const [notification, setNotification] = useState({ message: null, type: "" });

  useEffect(() => {
    personsService
      .getAll()
      .then(response => {
        setPersons(response.data);
      })
      .catch(error => {
        console.error("Error al obtener los contactos:", error);
        showNotification("Failed to retrieve contacts from the server", "error");
      });
  }, []);

  const handleNameChange = (event) => {
    setNewName(event.target.value);
  };

  const handleNumberChange = (event) => {
    setNewNumber(event.target.value);
  };

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
  };

  const showNotification = (message, type = "success") => {
    setNotification({ message, type });
    setTimeout(() => {
      setNotification({ message: null, type: "" });
    }, 2000);
  };

  const addPerson = (event) => {
    event.preventDefault();

    const existingPerson = persons.find((person) => person.name === newName);

    if (existingPerson) {
      const confirmUpdate = window.confirm(
        `${newName} is already added to phonebook, replace the old number with a new one?`
      );

      if (confirmUpdate) {
        const updatedPerson = { ...existingPerson, number: newNumber };

        personsService
          .update(existingPerson.id, updatedPerson)
          .then(response => {
            setPersons(persons.map(person =>
              person.id !== existingPerson.id ? person : response.data
            ));
            showNotification(`Updated ${newName}'s number`);
            setNewName("");
            setNewNumber("");
          })
          .catch(error => {
            if (error.response && error.response.status === 404) {
              showNotification(
                `The contact '${newName}' was already removed from the server.`,
                "error"
              );
              setPersons(persons.filter(p => p.id !== existingPerson.id));
            } else {
              console.error("Error al actualizar el contacto:", error);
              showNotification(`Failed to update ${newName}'s number`, "error");
            }
          });
      }
    } else {
      const newPerson = { name: newName, number: newNumber };

      personsService
        .create(newPerson)
        .then(response => {
          setPersons(persons.concat(response.data));
          showNotification(`Added ${newName}`);
          setNewName("");
          setNewNumber("");
        })
        .catch(error => {
          console.error("Error al agregar el contacto:", error);
          showNotification("Failed to add the contact", "error");
        });
    }
  };

  const deletePerson = (id, name) => {
    if (window.confirm(`Are you sure you want to delete ${name}?`)) {
      personsService
        .remove(id)
        .then(() => {
          setPersons(persons.filter(person => person.id !== id));
          showNotification(`Deleted ${name}`);
        })
        .catch(error => {
          if (error.response && error.response.status === 404) {
            showNotification(
              `The contact '${name}' was already removed from the server.`,
              "error"
            );
            setPersons(persons.filter(p => p.id !== id));
          } else {
            console.error("Error al eliminar el contacto:", error);
            showNotification(`Failed to delete ${name}`, "error");
          }
        });
    }
  };

  const personsToShow = filter
    ? persons.filter((person) =>
        person.name.toLowerCase().includes(filter.toLowerCase())
      )
    : persons;

  return (
    <div>
      <h2>Phonebook</h2>
      <Notification message={notification.message} type={notification.type} />
      <Filter value={filter} onChange={handleFilterChange} />
      <PersonForm
        onSubmit={addPerson}
        newName={newName}
        newNumber={newNumber}
        handleNameChange={handleNameChange}
        handleNumberChange={handleNumberChange}
      />
      <h2>Numbers</h2>
      <Persons persons={personsToShow} onDelete={deletePerson} />
    </div>
  );
};

export default App;
